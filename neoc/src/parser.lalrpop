use std::str::FromStr;
use crate::{
    parsetree::{ParseTree, Stmt, Expr, ArithmeticBinOpType},
    error as neoc_error,
};
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, neoc_error::ParseError>>);

extern {
    type Error = neoc_error::ParseError;
}

//=========================================
// MACROS
//=========================================

CommaList<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

//=========================================
// NON-TERMINALS
//=========================================

pub Program: ParseTree = {
    Stmt* => ParseTree::new(<>),
};

Stmt: Box<Stmt> = {
    <Expr> ";" => Box::new(Stmt::Expr(<>)),
    "print" <Expr> ";" => Box::new(Stmt::Print(<>)),
    ";" => Box::new(Stmt::Nop),
};

Expr = {
    <e:Expr> "+" <t:Term> => Box::new(Expr::ArithmeticBinOp(ArithmeticBinOpType::Add, e, t)),
    <e:Expr> "-" <t:Term> => Box::new(Expr::ArithmeticBinOp(ArithmeticBinOpType::Sub, e, t)),
    Term
};

Term = {
    <t:Term> "*" <f:Factor> => Box::new(Expr::ArithmeticBinOp(ArithmeticBinOpType::Mul, t, f)),
    <t:Term> "/" <f:Factor> => Box::new(Expr::ArithmeticBinOp(ArithmeticBinOpType::Div, t, f)),
    Factor
};

Factor: Box<Expr> = {
    Int => Box::new(Expr::Int(<>)),
    Bool => Box::new(Expr::Bool(<>)),
    Float => Box::new(Expr::Float(<>)),
    Nil => Box::new(Expr::Nil),
    "(" <Expr> ")",
    ! => { errors.push(<>); Box::new(Expr::Error) },
};


//=========================================
// TERMINALS
//=========================================

Int: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

Float: f64 = {
    r"[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap()
};

Nil: () = {
    "nil" => (),
};